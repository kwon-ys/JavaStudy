public class 모닝 extends 기아차 {
    public static final int cc = 800;
    public static void Recall() {

    }
    private Color bodycolor;
    private Tire[] tires;
    private int CarNumber carNumber;
    Getter...
    Setter...

    public void run() {
        달린다.;
    }

    public 모닝(Color color) {
        // 기본생성자 ( Java가 자동으로 만들어준다. 개발자가 명시적으로 선언하면 선언한 기본생성자를 실행한다.)
    }

    public 모닝(Color color) {
        // 기본생성자 (개발자가 선언한다. 이것이 존재하면 Java가 자동으로 만들어주는 기본생성자는 사용 불가능)
        this.bodycolor = color;
        // 모닝 서울 22차 9821 = new 모닝(노랑);
    }

    public 모닝(Color color, Tire[] tires) {
        // 기본생성자 (개발자가 선언한다. 이것이 존재하면 Java가 자동으로 만들어주는 기본생성자는 사용 불가능)
        // this.bodycolor = color;
        this(color);
        this.tires = tires;
        // 모닝 서울 22차 9821 = new 모닝(노랑, new Tire[] {160, 160, 160, 160});
    }

    public 모닝(Color color, Tire[] tires, CarNumber carNumber) {
        // 기본생성자 (개발자가 선언한다. 이것이 존재하면 Java가 자동으로 만들어주는 기본생성자는 사용 불가능)
        // this.bodycolor = color;
        // this.tires= tires;
        this(bodycolor, tires);
        this.carNumber = carNumber;
        // 모닝 서울 22차 9821 = new 모닝(노랑, new Tire[] {160, 160, 160, 160}, new CarNumber("서울22차9821));
    }

    [접근제한자] 리턴데이터타입 메소드이름(매개변수1이름, 매개변수2이름, ...){
        메소드에서 실행할 내용 문장들;
        ...
    }

    public void add(String name, int ... num){
    }
}
모닝.cc =400;
모닝.recall();



ArrayList : Java의 1차원적인 배열 컬렉션
배열에 값을 추가 => 길이가 늘어남
배열의 값을 삭제 => 길이가 감소함
배열의 길이를 알고자 할때는 size() 사용함
ArrayList는 list 인터페이스를 상속받은 클래스

List<데이터타입> 변수명 = new ArrayList<>();
ArrayList<데이터타입> 변수명 = new ArrayList<>();

부모클래스 메소드 5개
자식클래스 메소드 10개
손자클래스 메소드 7개

부모클래스 a = new 손자클래스();
a.부모메소드5개
((자식클래스)a).자신메소드10개 + 부모메소드5개
((손자클래스)a).자신메소드7개 + 자식메소드 10개 + 할아버지 메소드 5개

부모클래스 b = new 부모클래스();
b.부모메소드5개
((자식클래스)b).자신메소드10개 + 부모메소드5개 (에러임)

JSONParser parser = new JSONParser();

JSON은 {} 표현하는 문자 서술형 객체이다. 이름과 값으로 쌍을 이룬다. HashMap 컬렉션, Restful API 의 데이터 처리 기본이다
"이름":"값"
"이름":숫자값
"이름":[..배열..]
"이름":{..객체..}

{
	"roots" :
	{
		{
		"id":1,
		"productName":"수박바",
		"price":1000
		}

		{
		"id":2,
		"productName":"스크류바",
		"price":1200
		}
}

Database 읽기 => Java 객체 => JSON => JavaScript 객체 => 화면
화면 => JavaScript 객체 => JSON,FORM,XML => Java객체 => Database 저장

서버와 서버의 통신
다른 서버에서 데이터를 읽으려 한다 => RestFUL API => JSON => Java객체 => Controller => Service/Service Implement/Repository => Database

json - simple 라이브러리
gson 라이브러리
jackson 라이브러리



public enum Ecolor {
    White,
    Black,
    Gray,
    Blue,
    Red
}

public class Phone {
    private String model;
    private String color;
    private int makeYear;

    //model 의 Getter
    public String getModel() {
        return this.model;
    }

    //model 의 Setter
    public void setModel(String model) {
        this.model = model;
    }

    //makeYear 의 Getter
    public String getMakeYear() {
        if (this.makeYear <= 2020) {
            유효하지 않은 값은 유효한 값으로 변환하여 리턴한다.
        }
        return this.makeYear;
    }

    //makeYear 의 Setter
    public void setMakeYear(int makeYear) {
        if (this.makeYear <= 2020) {
            유효하지 않은 값은 저장하지 않는다.
        }
    }
        this.makeYear = makeYear;
    }

    //color 의 Getter

    //color 의 Setter
}

부모 생성자 호출할 때는 super(...); // 자신의 생성자에서만 호출 가능하다. (생성자에서만 생성자를 호출할 수 있다.)
부모 메소드 호출할 때는 super.메소드명(...);


객체지향의 다형성은 오버로딩, 오버라이딩, 추상클래스 활용, 인터페이스 활용

부모 클래스 타입을 사용하여 서로 다른 자식객체를 변환하여 사용한다.

자바 Object 클래스 = 최상위 클래스    모든 걸 상속 가능


//추상 메소드 선언
-> 매개 변수(프로토타입) 없는 메소드 = 바디 없는 메소드     사용가능한 곳 : 인터페이스, 추상 클래스
public static void main(String[] args) // void main(String[] args) <- 프로토타입 {
    .......  // <- 바디
}

추상 클래스는 항상 부모 클래스가 되어야함



JSON 파일 저장하고 읽기

1. 라이브러리가 필요하다. json-simple 을  maven 의  pom.xml 에 추가하거나 gradle 의  build.gradle 에 추가해야 한다.
2. 구글에서  maven repository 를 검색해서 홈페이지에 접속하고 json-simple 을 검색한다.
3. Usage 가 가장 많은 버전을 선택하여, pom.xml 이나 build.gradle 에 추가한다.
4. 자신의 프로젝트 pom.xml 이나 build.gradle 에 붙여넣기 하고 Maven Update 또는 gradle refresh 를 한다.


jar 파일 실행
java -jar ~~~


WireShark

OSI 7 layer 중의 Data Layer
IPv4 : 4바이트로 이루어진 주소
0.0.0.0 ~ 255.255.255.255
A클래스 : A.*.*.*      5.1.2.3, 5.32.38.109
        최대 16,777,216개 장비가 하나의 네트워크에 구성되어 있다
B클래스 : A.B.*.*      61.182.2.3,
        최대 65,536개 장비가 하나의 네트워크에 구성되어 있다
C클래스 : A.B.C.*
        최대 256개 장비가 하나의 네트워크에 구성되어 있다

hub :